
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  accountId: 'accountId',
  providerId: 'providerId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  idToken: 'idToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  value: 'value',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CountryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  order: 'order',
  code: 'code',
  language: 'language',
  currency: 'currency',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  order: 'order',
  countryId: 'countryId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NeighborhoodScalarFieldEnum = {
  id: 'id',
  name: 'name',
  order: 'order',
  cityId: 'cityId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LandmarkScalarFieldEnum = {
  id: 'id',
  name: 'name',
  order: 'order',
  description: 'description',
  type: 'type',
  cityId: 'cityId',
  latitude: 'latitude',
  longitude: 'longitude',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccommodationTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  order: 'order',
  code: 'code',
  description: 'description',
  category: 'category',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DestinationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  order: 'order',
  description: 'description',
  type: 'type',
  popularityScore: 'popularityScore',
  cityId: 'cityId',
  latitude: 'latitude',
  longitude: 'longitude',
  radius: 'radius',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LabelScalarFieldEnum = {
  id: 'id',
  name: 'name',
  order: 'order',
  code: 'code',
  description: 'description',
  category: 'category',
  icon: 'icon',
  color: 'color',
  priority: 'priority',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  hotelDetailsId: 'hotelDetailsId'
};

exports.Prisma.HotelGroupScalarFieldEnum = {
  id: 'id',
  name: 'name',
  order: 'order',
  description: 'description',
  website: 'website',
  logoUrl: 'logoUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HotelHighlightScalarFieldEnum = {
  id: 'id',
  title: 'title',
  order: 'order',
  description: 'description',
  category: 'category',
  icon: 'icon',
  priority: 'priority',
  isPromoted: 'isPromoted',
  hotelId: 'hotelId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HotelAmenityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  order: 'order',
  category: 'category',
  icon: 'icon',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoomAmenityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  order: 'order',
  category: 'category',
  icon: 'icon',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccessibilityOptionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  order: 'order',
  code: 'code',
  description: 'description',
  category: 'category',
  icon: 'icon',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HotelParkingScalarFieldEnum = {
  id: 'id',
  isAvailable: 'isAvailable',
  spaces: 'spaces',
  order: 'order',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  streetNumber: 'streetNumber',
  streetName: 'streetName',
  addressLine2: 'addressLine2',
  postalCode: 'postalCode',
  cityId: 'cityId',
  neighborhoodId: 'neighborhoodId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HotelImageScalarFieldEnum = {
  id: 'id',
  entityId: 'entityId',
  imageUrl: 'imageUrl',
  imageType: 'imageType',
  order: 'order',
  alt: 'alt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HotelCardScalarFieldEnum = {
  id: 'id',
  name: 'name',
  idCity: 'idCity',
  order: 'order',
  shortDescription: 'shortDescription',
  starRating: 'starRating',
  overallRating: 'overallRating',
  ratingAdjective: 'ratingAdjective',
  reviewCount: 'reviewCount',
  basePricePerNight: 'basePricePerNight',
  regularPrice: 'regularPrice',
  currency: 'currency',
  isPartner: 'isPartner',
  promoMessage: 'promoMessage',
  imageMessage: 'imageMessage',
  cancellationPolicy: 'cancellationPolicy',
  accommodationTypeId: 'accommodationTypeId',
  destinationId: 'destinationId',
  hotelGroupId: 'hotelGroupId',
  latitude: 'latitude',
  longitude: 'longitude',
  detailsId: 'detailsId'
};

exports.Prisma.HotelDetailsScalarFieldEnum = {
  id: 'id',
  idHotelCard: 'idHotelCard',
  description: 'description',
  addressId: 'addressId',
  order: 'order',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HotelCardToHotelHighlightScalarFieldEnum = {
  hotelCardId: 'hotelCardId',
  hotelHighlightId: 'hotelHighlightId',
  order: 'order',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HotelCardToLabelScalarFieldEnum = {
  hotelCardId: 'hotelCardId',
  labelId: 'labelId',
  order: 'order',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HotelCardToAccessibilityOptionScalarFieldEnum = {
  hotelCardId: 'hotelCardId',
  accessibilityOptionId: 'accessibilityOptionId',
  order: 'order',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HotelCardToHotelAmenityScalarFieldEnum = {
  hotelCardId: 'hotelCardId',
  hotelAmenityId: 'hotelAmenityId',
  order: 'order',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.HotelDetailsToRoomAmenityScalarFieldEnum = {
  hotelDetailsId: 'hotelDetailsId',
  roomAmenityId: 'roomAmenityId',
  order: 'order',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DestinationToCityScalarFieldEnum = {
  destinationId: 'destinationId',
  cityId: 'cityId',
  order: 'order',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Session: 'Session',
  Account: 'Account',
  Verification: 'Verification',
  Country: 'Country',
  City: 'City',
  Neighborhood: 'Neighborhood',
  Landmark: 'Landmark',
  AccommodationType: 'AccommodationType',
  Destination: 'Destination',
  Label: 'Label',
  HotelGroup: 'HotelGroup',
  HotelHighlight: 'HotelHighlight',
  HotelAmenity: 'HotelAmenity',
  RoomAmenity: 'RoomAmenity',
  AccessibilityOption: 'AccessibilityOption',
  HotelParking: 'HotelParking',
  Address: 'Address',
  HotelImage: 'HotelImage',
  HotelCard: 'HotelCard',
  HotelDetails: 'HotelDetails',
  HotelCardToHotelHighlight: 'HotelCardToHotelHighlight',
  HotelCardToLabel: 'HotelCardToLabel',
  HotelCardToAccessibilityOption: 'HotelCardToAccessibilityOption',
  HotelCardToHotelAmenity: 'HotelCardToHotelAmenity',
  HotelDetailsToRoomAmenity: 'HotelDetailsToRoomAmenity',
  DestinationToCity: 'DestinationToCity'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
