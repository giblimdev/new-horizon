// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

//////////////////////////////
////     Tables auth     /////
//////////////////////////////
/**
 * üîê Tables d'authentification
 * User
 * R√¥le : Stocke les informations des utilisateurs de la plateforme
 * typescript
 * // Exemple d'utilisateur
 * {
 * id: "user_123",
 * name: "Marie Dupont",
 * email: "marie.dupont@email.com",
 * emailVerified: true,
 * image: "https://avatar.com/marie.jpg"
 * }
 */
model User {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  emailVerified Boolean  @default(false)
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  sessions Session[]
  accounts Account[]
  Address  Address[]

  @@map("users")
}

/**
 * Session
 * R√¥le : G√®re les sessions actives des utilisateurs connect√©s
 * typescript
 * // Exemple de session
 * {
 * id: "session_456",
 * userId: "user_123",
 * token: "eyJhbGciOiJIUzI1NiIs...",
 * expiresAt: "2025-06-08T01:29:00Z",
 * ipAddress: "192.168.1.100",
 * userAgent: "Mozilla/5.0..."
 * }
 */
model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

/**
 * Account
 * R√¥le : Stocke les m√©thodes de connexion (OAuth, email/password)
 * typescript
 * // Exemple de compte Google OAuth
 * {
 * id: "account_789",
 * userId: "user_123",
 * providerId: "google",
 * accessToken: "ya29.a0AfH6SMC...",
 * refreshToken: "1//04...",
 * scope: "openid email profile"
 * }
 */
model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verifications")
}

//////////////////////////////////////
////     Tables touristiques     /////
//////////////////////////////////////

/**
 * üåç Tables g√©ographiques
 * Country
 * R√¥le : R√©f√©rentiel des pays
 * typescript
 * // Exemple de pays
 * {
 * id: "country_fr",
 * name: "France",
 * code: "FR"
 * }
 */
model Country {
  id        String   @id @default(uuid())
  name      String
  order     Int?     @default(100)
  code      String   @unique //quel code ?
  language  String? // plusieur langage possible
  currency  String? // plusieur possible
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cities City[]

  @@map("countries")
}

model City {
  id        String   @id @default(uuid())
  name      String
  order     Int?     @default(100)
  countryId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  country           Country             @relation(fields: [countryId], references: [id], onDelete: Cascade)
  neighborhoods     Neighborhood[]
  landmarks         Landmark[]
  addresses         Address[]
  destinations      Destination[]
  DestinationToCity DestinationToCity[]

  @@map("cities")
}

model Neighborhood {
  id        String   @id @default(uuid())
  name      String
  order     Int?     @default(100)
  cityId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  city      City      @relation(fields: [cityId], references: [id], onDelete: Cascade)
  addresses Address[]

  @@map("neighborhoods")
}

model Landmark {
  id          String   @id @default(uuid())
  name        String
  order       Int?     @default(100)
  description String?
  type        String
  cityId      String
  latitude    Float?
  longitude   Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  city City @relation(fields: [cityId], references: [id], onDelete: Cascade)

  @@map("landmarks")
}

///////////////////////////////////////
////     Tables administrateur     /////
///////////////////////////////////////

// üè® Tables de r√©f√©rentiel h√¥telier

model AccommodationType {
  id          String   @id @default(uuid())
  name        String
  order       Int?     @default(100)
  code        String   @unique
  description String?
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  HotelCard HotelCard[]

  @@map("accommodation_types")
}

model Destination {
  id              String   @id @default(uuid())
  name            String
  order           Int?     @default(100)
  description     String?
  type            String
  popularityScore Int      @default(0)
  cityId          String
  latitude        Float?
  longitude       Float?
  radius          Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  HotelCard         HotelCard[]
  City              City[]
  DestinationToCity DestinationToCity[]

  @@map("destinations")
}

model Label {
  id          String   @id @default(uuid())
  name        String
  order       Int?     @default(100)
  code        String   @unique
  description String?
  category    String
  icon        String?
  color       String?
  priority    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  HotelDetails     HotelDetails?      @relation(fields: [hotelDetailsId], references: [id])
  hotelDetailsId   String?
  HotelCardToLabel HotelCardToLabel[]

  @@map("labels")
}

model HotelGroup {
  id              String   @id @default(uuid())
  name            String // group ou professionnel g√©rer par un particulier
  order           Int?     @default(100)
  code            String   @unique
  description     String?
  website         String?
  logoUrl         String?
  foundedYear     Int?
  headquarters    String?
  totalProperties Int      @default(0)
  totalRooms      Int      @default(0)
  marketCap       Float?
  annualRevenue   Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  HotelCard HotelCard[]

  @@map("hotel_groups")
}

model HotelHighlight {
  id                        String                      @id @default(uuid())
  title                     String
  order                     Int?                        @default(100)
  description               String?
  category                  String // "Location", "Amenity", "Service", "View", "Offer", "Food"
  icon                      String? // image
  priority                  Int                         @default(0)
  isPromoted                Boolean                     @default(false)
  hotelId                   String
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  HotelCardToHotelHighlight HotelCardToHotelHighlight[]

  @@map("hotel_highlights")
}

model HotelAmenity {
  id          String   @id @default(uuid())
  name        String
  order       Int?     @default(100)
  category    String? // Cat√©gorie pour regroupement ("Location", "Amenity", "Service", "View", "Offer", "Food")
  icon        String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  HotelCard               HotelCard[]
  HotelCardToHotelAmenity HotelCardToHotelAmenity[]

  @@map("hotel_amenities")
}

model RoomAmenity {
  id          String   @id @default(uuid())
  name        String
  order       Int?     @default(100)
  category    String // Cat√©gorie pour regroupement ("Location", "Amenity", "Service", "View", "Offer", "Food")
  icon        String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt 

  HotelDetails              HotelDetails[]
  HotelDetailsToRoomAmenity HotelDetailsToRoomAmenity[]
}

model AccessibilityOption {
  id                             String                           @id @default(uuid())
  name                           String
  order                          Int?                             @default(100)
  code                           String                           @unique
  description                    String?
  category                       String
  icon                           String?
  isRequired                     Boolean                          @default(false)
  createdAt                      DateTime                         @default(now())
  updatedAt                      DateTime                         @updatedAt
  HotelCardToAccessibilityOption HotelCardToAccessibilityOption[]

  @@map("accessibility_options")
}

model HotelParking {
  id          String   @id @default(uuid())
  isAvailable Boolean  @default(true)
  spaces      Int?
  order       Int?     @default(100)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  HotelCard HotelCard[]

  @@map("hotel_parking")
}

/////////////////////////////////////////////
/////     Tables cr√©ation H√©bergement     /////
/////////////////////////////////////////////

model Address {
  id             String         @id @default(uuid())
  streetNumber   String?
  streetName     String
  addressLine2   String?
  postalCode     String
  cityId         String
  neighborhoodId String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  city           City           @relation(fields: [cityId], references: [id], onDelete: Cascade)
  neighborhood   Neighborhood?  @relation(fields: [neighborhoodId], references: [id], onDelete: SetNull)
  hotelDetails   HotelDetails[]
  user           User[]

  @@map("addresses")
}

model HotelImage {
  id       String @id @default(uuid())
  entityId String
  imageUrl String

  imageType String // city hotel room ....
  order     Int         @default(20)
  alt       String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  HotelCard HotelCard[]

  @@map("hotel_images")
}

model HotelCard {
  id                             String                           @id @default(uuid())
  name                           String
  idCity                         String
  shortDescription               String?
  starRating                     Int
  overallRating                  Float?
  ratingAdjective                String?
  reviewCount                    Int                              @default(0)
  basePricePerNight              Float
  regularPrice                   Float?
  currency                       String                           @default("EUR")
  isPartner                      Boolean                          @default(false)
  promoMessage                   String?
  imageMessage                   String?
  cancellationPolicy             String?
  accommodationTypeId            String?
  destinationId                  String?
  hotelGroupId                   String?
  parking                        HotelParking[]
  images                         HotelImage[]
  latitude                       Float? // GPS latitude
  longitude                      Float? // GPS longitude
  HotelAmenity                   HotelAmenity[]
  details                        HotelDetails?                    @relation(fields: [detailsId], references: [id])
  detailsId                      String?
  accommodationType              AccommodationType?               @relation(fields: [accommodationTypeId], references: [id], onDelete: SetNull)
  destination                    Destination?                     @relation(fields: [destinationId], references: [id], onDelete: SetNull)
  hotelGroup                     HotelGroup?                      @relation(fields: [hotelGroupId], references: [id], onDelete: SetNull)
  HotelCardToHotelHighlight      HotelCardToHotelHighlight[]
  HotelCardToLabel               HotelCardToLabel[]
  HotelCardToAccessibilityOption HotelCardToAccessibilityOption[]
  HotelCardToHotelAmenity        HotelCardToHotelAmenity[]
}

model HotelDetails {
  id          String  @id @default(uuid())
  idHotelCard String
  description String?
  addressId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address Address @relation(fields: [addressId], references: [id], onDelete: Cascade)

  RoomAmenity               RoomAmenity[]
  Label                     Label[]
  HotelCard                 HotelCard[]
  HotelDetailsToRoomAmenity HotelDetailsToRoomAmenity[]

  @@map("hotel_details")
}

//////////////////////////////
//// Tables de jointure //////
//////////////////////////////

model HotelCardToHotelHighlight {
  hotelCardId      String   @map("hotel_card_id")
  hotelHighlightId String   @map("hotel_highlight_id")
  order            Int?     @default(100)
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  hotelCard      HotelCard      @relation(fields: [hotelCardId], references: [id])
  hotelHighlight HotelHighlight @relation(fields: [hotelHighlightId], references: [id])

  @@id([hotelCardId, hotelHighlightId])
  @@map("hotel_card_to_highlights")
}

model HotelCardToLabel {
  hotelCardId String   @map("hotel_card_id")
  labelId     String   @map("label_id")
  order       Int?     @default(100)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  hotelCard HotelCard @relation(fields: [hotelCardId], references: [id])
  label     Label     @relation(fields: [labelId], references: [id])

  @@id([hotelCardId, labelId])
  @@map("hotel_card_to_labels")
}

model HotelCardToAccessibilityOption {
  hotelCardId           String   @map("hotel_card_id")
  accessibilityOptionId String   @map("accessibility_option_id")
  order                 Int?     @default(100)
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  hotelCard           HotelCard           @relation(fields: [hotelCardId], references: [id])
  accessibilityOption AccessibilityOption @relation(fields: [accessibilityOptionId], references: [id])

  @@id([hotelCardId, accessibilityOptionId])
  @@map("hotel_card_to_accessibility")
}

model HotelCardToHotelAmenity {
  hotelCardId    String   @map("hotel_card_id")
  hotelAmenityId String   @map("hotel_amenity_id")
  order          Int?     @default(100)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  hotelCard    HotelCard    @relation(fields: [hotelCardId], references: [id])
  hotelAmenity HotelAmenity @relation(fields: [hotelAmenityId], references: [id])

  @@id([hotelCardId, hotelAmenityId])
  @@map("hotel_card_to_amenities")
}

model HotelDetailsToRoomAmenity {
  hotelDetailsId String   @map("hotel_details_id")
  roomAmenityId  String   @map("room_amenity_id")
  order          Int?     @default(100)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  hotelDetails HotelDetails @relation(fields: [hotelDetailsId], references: [id])
  roomAmenity  RoomAmenity  @relation(fields: [roomAmenityId], references: [id])

  @@id([hotelDetailsId, roomAmenityId])
  @@map("hotel_details_to_room_amenities")
}

model DestinationToCity {
  destinationId String   @map("destination_id")
  cityId        String   @map("city_id")
  order         Int?     @default(100)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  destination Destination @relation(fields: [destinationId], references: [id])
  city        City        @relation(fields: [cityId], references: [id])

  @@id([destinationId, cityId])
  @@map("destination_to_cities")
}
