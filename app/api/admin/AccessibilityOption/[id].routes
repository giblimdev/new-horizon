import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { PrismaClientKnownRequestError } from "@prisma/client/runtime/library";

// GET /api/admin/Amenity/[id]
export async function GET(req: NextRequest) {
  try {
    const url = new URL(req.url);
    const id = url.pathname.split("/").pop();

    if (!id) {
      return NextResponse.json({ error: "ID manquant dans l'URL" }, { status: 400 });
    }

    const amenity = await prisma.amenity.findUnique({
      where: { id },
      // Ajoute ici les relations à inclure si besoin
    });

    if (!amenity) {
      return NextResponse.json({ error: "Équipement non trouvé" }, { status: 404 });
    }

    return NextResponse.json(amenity, { status: 200 });
  } catch (error) {
    console.error("GET Amenity error:", error);
    return NextResponse.json({ error: "Erreur serveur" }, { status: 500 });
  }
}

// PUT /api/admin/Amenity/[id]
export async function PUT(req: NextRequest) {
  try {
    const url = new URL(req.url);
    const id = url.pathname.split("/").pop();

    if (!id) {
      return NextResponse.json({ error: "ID manquant dans l'URL" }, { status: 400 });
    }

    const body = await req.json();

    // Exemple de validation basique
    if (!body.name) {
      return NextResponse.json({ error: "Le nom est requis" }, { status: 400 });
    }

    const updated = await prisma.amenity.update({
      where: { id },
      data: {
        name: body.name,
        order: body.order,
        category: body.category,
        icon: body.icon,
        description: body.description,
        // Ajoute les autres champs si besoin
      },
    });

    return NextResponse.json(updated, { status: 200 });
  } catch (error: any) {
    if (error instanceof PrismaClientKnownRequestError && error.code === "P2025") {
      return NextResponse.json({ error: "Équipement non trouvé" }, { status: 404 });
    }
    return NextResponse.json({ error: "Erreur lors de la mise à jour" }, { status: 500 });
  }
}

// DELETE /api/admin/Amenity/[id]
export async function DELETE(req: NextRequest) {
  try {
    const url = new URL(req.url);
    const id = url.pathname.split("/").pop();

    if (!id) {
      return NextResponse.json({ error: "ID manquant dans l'URL" }, { status: 400 });
    }

    await prisma.amenity.delete({
      where: { id },
    });

    return NextResponse.json({ success: true }, { status: 200 });
  } catch (error: any) {
    if (error instanceof PrismaClientKnownRequestError && error.code === "P2025") {
      return NextResponse.json({ error: "Équipement non trouvé" }, { status: 404 });
    }
    return NextResponse.json({ error: "Erreur lors de la suppression" }, { status: 500 });
  }
}
